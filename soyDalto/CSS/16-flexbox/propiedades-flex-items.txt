Los flex-items tambien tienen propiedades reservadas, es decir solo funcionan cuando su contenedor es flex.

{
    aling-self (cross-axis)
}

FUNCIONAMIENTO DEl MARGIN 

{
* Hace es lo contrario de cuando se posiciona dentro de un contenedor normal: Por ejemplo, al hacer margin-left: auto se posiciona a la derecha del contendeor, al hacer margin-bottom:auto se posiciona arriba, y para centrar una forma abreviada es margin:auto; 
    margin-(direction): 
}

{
* Toma el espacio sobrante de la linea o fila y se reparte entre sus cajas para que todas tengan el mismo width. Ejemplo: flex-grow: 1; El numero indica el numero de espacios que va a tener cada caja.
    flex-grow: (espacio asignado + sobrante / grows) (main axis)
}

{
* Nos pemite elegir que caja va a dar mas espacio cuando no alcance el lugar disponible.

En resumen es a la veolcidad en que se encoje la caja. Por defecto es 1. Si le asignamos "0", la caja no se encojeria.
    flexh-shrink: Espacio que "cede" (main-axis)
}

{
* Es lo mismo que el width. Pero, tiene mas importancia, asi que no importa si lo escribimos en una linea mas arriba o mas abajo. El valor que a tomar es que le asigenemos con el flex-basis.

Un ejemplo es cuando el with de la caja contenedora es menor que el flex-item. Cuando se usa el margin apareceria una barra de desplazamiento horizontal para ver todo el width del flex-item. Pero con flex-basis, la caja se ajusta; El flex-item va a ajustar el width hasta que la caja contenedora tenga el ancho suficiente para que alcance el width del flex-item

    flex-basis: Medicion antes de encogerse (en auto (defect value)), agarra el width, y si no tiene mas prioridad)(main axis)
}

{
* Es una forma abreviada. Y necesita al menos 1 parametro para funcionar.
    flex: 
        flex-grow:

        flex-shrink:

        flex-basis: (Al menos el primer parametro obligatorio)
}

{
* Como en el z-index, pero en el eje en el que apunta el main-axis
* Es como se posiciona un elemento uno encia de otro, no sobre "otro" como lo hace el z-index normal. Si no encima . Si el main-axis apunta a la derecha, el elemento con el order mas grande va a estar mas a la derecha
    order:
}